@page "/"
@using AdmiApp.Appl.Interfaces
@using AdmiApp.Core.DTO
@using AdmiApp.Models

@inject IExamService examService;
@inject IUniversityService universityService;
@inject NavigationManager NavManager;
@inject CurentSpecialityInfo curentSpecialityInfo;

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="title">
                    Предметы
                    <div class="devider">
                        <hr />
                    </div>
                </div>
                <div>
                    @if(Exams != null && Exams.Count > 0)
                    {
                        @foreach(var exam in Exams)
                        {
                            <MudCheckBox @bind-Value="@exam.IsChecked" Color="Color.Primary" Label="@exam.ExamName"></MudCheckBox>
                        }
                    }

                </div>
            </div>

            <div class="card">
                <div class="title">
                    Баллы
                    <div class="devider">
                        <hr />
                    </div>
                </div>
                <div style="padding: 10px 20px;">
                    <MudTextField ShrinkLabel @bind-Value="Score" Label="Баллы" Variant="Variant.Text"></MudTextField>
                </div>
            </div>
            <div class="submit_button">
                <MudButton OnClick="GetUniversitiesList" Variant="Variant.Filled" Color="Color.Primary">Погнали</MudButton>
            </div>
            @if(Universities != null && Universities.Count > 0)
            {
                <div class="card">
                    <div class="title">
                        Уники
                        <div class="devider">
                            <hr />
                        </div>
                    </div>

                    <MudTreeView T="string" ExpandOnClick="true">
                    @foreach(var univer in Universities)
                    {
                        <MudTreeViewItem Value="@(@univer.UniversityName)">
                        @foreach(var faculty in univer.Faculties)
                        {
                            <MudTreeViewItem Value="@(@faculty.FacultyName)">
                            @foreach(var spec in faculty.Specialties)
                            {
                                <MudTreeViewItem OnClick="() => {GoToUniversityPage(univer.UniversityName, faculty.FacultyName, spec.SpecialtyName);}" Value="@(@spec.SpecialtyName)" />
                            }
                            </MudTreeViewItem>
                        }

                        </MudTreeViewItem>
                    }
                    </MudTreeView>
                </div>
            }
            
        </div>
    </div>
</div>

@code{
    public bool Basic_CheckBox1 { get; set; } = true;
    public bool Basic_CheckBox2 { get; set; } = false;
    public bool Basic_CheckBox3 { get; set; } = false;
    private List<ExamModel> Exams;

    private List<UniversityAdmissionResponseDTO> Universities;


    public string? Score { get; set; }
    public string? Dormitory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Exams = new List<ExamModel>();

        var examsResponse = await examService.GetAllExams();

        if (examsResponse.IsSuccess && examsResponse.Content != null)
        {
            var examsData = examsResponse.Content;
            foreach(var exam in examsData)
            {
                Exams.Add(new ExamModel
                    {
                        IsChecked = false,
                        ExamName = exam.Exams_Name,
                        ExamId = exam.Id
                    });
            }
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Пошел нахуй", "Хуй соси, губой тряси", "Понял");
        }
    }

    private async Task GetUniversitiesList()
    {
        var checkedExams = new List<string>();
        foreach (var exam in Exams)
        {
            if (exam.IsChecked == true)
            {
                if (exam.ExamName != null)
                    checkedExams.Add(exam.ExamName);
            }
        }

        int? score = null;
        if (!string.IsNullOrEmpty(Score))
        {
            score = Int32.Parse(Score);
        }

        var queryString = new List<string>();
        foreach (var subject in checkedExams)
        {
            queryString.Add($"subjectNames={Uri.EscapeDataString(subject)}");
        }
        if (score.HasValue)
        {
            queryString.Add($"passingScore={score.Value}");
        }
        var query = string.Join("&", queryString);

        Universities = await universityService.GetUniversitiesList(query);
        if (Universities == null || Universities.Count <= 0)
        {
            await App.Current.MainPage.DisplayAlert("Пошел нахуй", "Хуй соси, губой тряси", "Понял");
        }
    }

    private void GoToUniversityPage(string universityName, string facultyName, string specialityName)
    {
        curentSpecialityInfo.UniversityName = universityName;
        curentSpecialityInfo.FacultyName = facultyName;
        curentSpecialityInfo.SpecialityName = specialityName;

        NavManager.NavigateTo("/university-info");
    }
}

@* 
                    <div class="card">
                <div class="title">
                    Информация о вузе
                    <div class="devider">
                        <hr />
                    </div>
                </div>
                <div class="col-12 col-md-6" style="padding: 10px 20px;">
                    <MudSelect T="Region" Label="Область" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@(new Region("Минск"))" />
                        <MudSelectItem Value="@(new Region("Минская"))" />
                        <MudSelectItem Value="@(new Region("Литва"))" />
                    </MudSelect>
                </div>
                <div class="col-12 col-md-6" style="padding: 10px 20px;">
                    <MudSelect T="TypeOfInst" Label="Тип учебного заведения" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@(new TypeOfInst("ВУЗ/ССУЗ"))" />
                        <MudSelectItem Value="@(new TypeOfInst("ВУЗ"))" />
                        <MudSelectItem Value="@(new TypeOfInst("ССУЗ"))" />
                    </MudSelect>
                </div>
                <div class="col-12 col-md-6" style="padding: 10px 20px;">
                    <MudSelect T="EducationForm" Label="Форма обучения" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@(new EducationForm("Все"))" />
                        <MudSelectItem Value="@(new EducationForm("Дневная"))" />
                        <MudSelectItem Value="@(new EducationForm("Заочная"))" />
                        <MudSelectItem Value="@(new EducationForm("Дистанционная"))" />
                    </MudSelect>
                </div>
                <div class="col-12 col-md-6" style="padding: 10px 20px;">
                    <MudSelect T="PayForm" Label="Форма оплаты" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@(new PayForm("Все"))" />
                        <MudSelectItem Value="@(new PayForm("Бюджет"))" />
                        <MudSelectItem Value="@(new PayForm("Платная"))" />
                    </MudSelect>
                </div>
            </div> *@


                @* public class Region
    {
        public Region(string name)
        {
            Name = name;
        }

        public readonly string Name;

        // Note: this is important so the MudSelect can compare pizzas
        public override bool Equals(object o)
        {
            var other = o as Region;
            return other?.Name == Name;
        }

        // Note: this is important too!
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        // Implement this for the Pizza to display correctly in MudSelect
        public override string ToString() => Name;
    }

    public class TypeOfInst
    {
        public TypeOfInst(string name)
        {
            Name = name;
        }

        public readonly string Name;

        // Note: this is important so the MudSelect can compare pizzas
        public override bool Equals(object o)
        {
            var other = o as TypeOfInst;
            return other?.Name == Name;
        }

        // Note: this is important too!
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        // Implement this for the Pizza to display correctly in MudSelect
        public override string ToString() => Name;
    }

    public class EducationForm
    {
        public EducationForm(string name)
        {
            Name = name;
        }

        public readonly string Name;

        // Note: this is important so the MudSelect can compare pizzas
        public override bool Equals(object o)
        {
            var other = o as EducationForm;
            return other?.Name == Name;
        }

        // Note: this is important too!
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        // Implement this for the Pizza to display correctly in MudSelect
        public override string ToString() => Name;
    }

    public class PayForm
    {
        public PayForm(string name)
        {
            Name = name;
        }

        public readonly string Name;

        // Note: this is important so the MudSelect can compare pizzas
        public override bool Equals(object o)
        {
            var other = o as PayForm;
            return other?.Name == Name;
        }

        // Note: this is important too!
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        // Implement this for the Pizza to display correctly in MudSelect
        public override string ToString() => Name;
    } *@